Nginx的location配置规则用于定义如何响应特定的请求URI。这些规则基于正则表达式和字符串匹配来确定哪个location块应该处理给定的请求。以下是一些基本的location配置规则和优先级说明：

    精确匹配：使用=前缀进行精确匹配。如果请求的URI与location块中指定的URI完全匹配，则使用该location块。这是优先级最高的匹配类型。
    示例：
    nginx
    location = /exact/path {  
        # 处理 /exact/path 请求  
    }

    前缀匹配：如果没有使用=、^~或~/~*前缀，location将执行前缀匹配。它会匹配任何以指定URI开头的请求。如果有多个前缀匹配，Nginx将选择最长前缀的location块。
    示例：
    nginx
    location /prefix/ {  
        # 处理以 /prefix/ 开头的请求  
    }

    正则表达式匹配：使用~或~*前缀进行正则表达式匹配。~表示区分大小写的匹配，而~*表示不区分大小写的匹配。正则表达式匹配具有比前缀匹配更高的优先级，但如果存在多个正则表达式匹配，Nginx将选择第一个匹配的location块。
    示例：
    nginx
    location ~ \.php$ {  
        # 处理以 .php 结尾的请求  
    }

    最长前缀匹配：使用^~前缀进行最长前缀匹配。如果请求的URI与location块中指定的URI前缀匹配，并且该location块是使用^~前缀定义的，则Nginx将使用该location块，并停止搜索其他location块。
    示例：
    nginx
    location ^~ /long/path/ {  
        # 处理以 /long/path/ 开头的请求，并停止搜索其他 location  
    }
未定义匹配：如果请求URI与任何location块都不匹配，Nginx通常会使用默认服务器块（server块）中的配置来处理请求。

在配置中，这些规则按照优先级顺序应用，即首先检查精确匹配，然后是最长前缀匹配，接着是正则表达式匹配，最后是前缀匹配。一旦找到匹配的location块，Nginx将使用该块中的配置来处理请求。

请注意，正则表达式匹配通常比前缀匹配更消耗资源，因为它们需要更多的处理来评估。因此，在可能的情况下，使用前缀匹配可以提高性能。

精确匹配 (=)
前缀匹配 (^~ 修饰符,最长前缀匹配)
按文件中出现的顺序进行的前缀匹配
正则匹配 (~ 或 ~*)

nginx -s reload 是用于重新加载 Nginx 配置文件的命令。在 Nginx 运行时，当修改了配置文件（如 nginx.conf）中的配置项后，需要重新加载配置使其生效，而不需要停止 Nginx 服务



